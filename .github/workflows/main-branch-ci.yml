# This is a basic workflow to help you get started with Actions

name: CI for main branch PR of project Khalims-Will 

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Show gcc version
        run: |
          gcc -v

      - name: Cache apt packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives/*.deb
          key: ${{ runner.os }}-apt-${{ hashFiles('apt-packages.txt') }}

      - name: Install tools
        run: |
          sudo apt-get install -y lcov
          sudo apt-get install -y valgrind
          sudo apt-get install -y libcurl4-openssl-dev
          sudo apt install -y libcpp-httplib-dev
          sudo apt install -y libpqxx-dev libpq-dev
          sudo apt install -y libhiredis-dev
          sudo apt install -y librabbitmq-dev

      - name: Build a release binary
        run: make release && make clean

      - name: Build test binary and run it
        run: |
          export APPLICATION_NAME=khalmis-will

          export EUREKA_HOST=mock.eureka.com
          export EUREKA_PORT=8761

          export POSTGRES_HOST=localhost
          export POSTGRES_PORT=5432
          export POSTGRES_DATABASE=postgres
          export POSTGRES_USERNAME=postgres
          export POSTGRES_PASSWD=postgres

          export REDIS_HOST=localhost
          export REDIS_PORT=6379

          export RABBITMQ_HOST=localhost
          export RABBITMQ_PORT=5672
          export RABBITMQ_USER=guest
          export RABBITMQ_PASSWD=guest

          make test

      - name: Check memory leak
        run: |
          if grep -q "definitely lost: [1-9][0-9]* bytes" khalims-will.*_vg.log; then
              cat khalims-will.*_vg.log
              exit 1
          fi

      - name: Generate coverage
        run: |
          lcov -c -d ./output -o output/coverage.info
          lcov --ignore-errors unused --remove output/coverage.info '*/tests/*' -o output/coverage.refacted.info

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: output/coverage.refacted.info
          fail_ci_if_error: true
          name: khalims-will-lcov

      - name: Clean environment
        if: always()
        run: |
          make clean

